name: QLCplus Github Actions CI Build

on: ["push", "pull_request"]

jobs:
  build-windows:
    runs-on: windows-latest
    name: QLCplus Windows ${{matrix.task}}
    strategy:
      fail-fast: false
      matrix:
        task: [compile-qt5, compile-qt5qml]
    env:
      CI_REPO_SLUG: ${{ github.repository }}
      CI_BRANCH: ${{ github.head_ref }}
      CI_PULL_REQUEST: ${{ github.event.number }}
      QMAKESPEC: win32-g++
      QT_MODULES:
        qtscript

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: false

      - name: Set ENV variables
        shell: bash
        run: |
          echo "CI_BRANCH=$(echo $GITHUB_REF | cut -d '/' -f 3)" >> $GITHUB_ENV
          echo "CI_SECURE_ENV_VARS=$(if [ -z '${{ secrets.something }}' ]; then echo 'false'; else echo 'true'; fi)" >> $GITHUB_ENV
          echo "CI_EVENT_TYPE=$(if [ 'schedule' == '${{ github.event_name }}' ]; then echo 'cron'; else echo '${{ github.event_name }}'; fi)" >> $GITHUB_ENV
          echo "NPROC=$(nproc)" >> $GITHUB_ENV
          echo "TASK=$(echo '${{matrix.task}}' | cut -d '-' -f 2)" >> $GITHUB_ENV
          echo "QT=${QT:-$(echo '${{matrix.task}}' | cut -d '-' -f 2)}" >> $GITHUB_ENV
          echo "INSTALL_ROOT=/c/" >> $GITHUB_ENV
          echo "BUILD_DATE=`date -u '+%Y%m%d'`" >> $GITHUB_ENV
          echo "GIT_REV=`git rev-parse --short HEAD`" >> $GITHUB_ENV

      - name: Set v4 ENV variables
        shell: bash
        if: ${{ matrix.task == 'compile-qt5' || matrix.task == 'compile-qt5-32bit' }}
        run: |
          echo "OUTFILE=`grep 'OutFile' platforms/windows/qlcplus4Qt5.nsi | cut -d'"' -f 2`" >> $GITHUB_ENV
          echo "APPVERSION=`grep '^!qmlui' variables.pri | grep APPVERSION | sed 's/^.*= *//' | cut -d ' ' -f 1`" >> $GITHUB_ENV
          echo "NSIS_SCRIPT=qlcplus4Qt5.nsi" >> $GITHUB_ENV

      - name: Set v5 ENV variables
        shell: bash
        if: ${{ matrix.task == 'compile-qt5qml' }}
        run: |
          echo "OUTFILE=`grep 'OutFile' platforms/windows/qlcplus5Qt5.nsi | cut -d'"' -f 2`" >> $GITHUB_ENV
          echo "APPVERSION=`grep '^qmlui' variables.pri | grep APPVERSION | sed 's/^.*= *//' | cut -d ' ' -f 1`" >> $GITHUB_ENV
          echo "NSIS_SCRIPT=qlcplus5Qt5.nsi" >> $GITHUB_ENV

      - name: Print ENV vars
        shell: bash
        run: |
          echo "CI_BRANCH: ${CI_BRANCH}"
          echo "CI_PULL_REQUEST: ${CI_PULL_REQUEST}"
          echo "CI_REPO_SLUG: ${CI_REPO_SLUG}"
          echo "CI_EVENT_TYPE: ${CI_EVENT_TYPE}"
          echo "CI_SECURE_ENV_VARS: ${CI_SECURE_ENV_VARS}"
          echo "TASK: ${TASK}"
          echo "QT: ${QT}"
          echo "NPROC: ${NPROC}"

      - name: Update and install MSYS2 (64bit)
        uses: msys2/setup-msys2@v2
        if: ${{ matrix.task == 'compile-qt5' || matrix.task == 'compile-qt5qml' }}
        with:
          msystem: mingw64
          release: true
          update: false
          path-type: inherit
          install: >-
            wget
            unzip
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-gcc-libs
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-libmad
            mingw-w64-x86_64-libsndfile
            mingw-w64-x86_64-flac
            mingw-w64-x86_64-fftw
            mingw-w64-x86_64-libusb
            mingw-w64-x86_64-python-lxml
            mingw-w64-x86_64-qt5-base
            mingw-w64-x86_64-qt5-multimedia
            mingw-w64-x86_64-qt5-serialport
            mingw-w64-x86_64-qt5-websockets
            mingw-w64-x86_64-qt5-script
            mingw-w64-x86_64-qt5-tools
            mingw-w64-x86_64-qt5-imageformats
            mingw-w64-x86_64-qt5-svg
            mingw-w64-x86_64-qt5-declarative
            mingw-w64-x86_64-qt5-quickcontrols
            mingw-w64-x86_64-qt5-quickcontrols2
            mingw-w64-x86_64-qt5-3d
            mingw-w64-x86_64-qt5-quick3d
            mingw-w64-x86_64-nsis

      - name: Update and install MSYS2 (32 bit)
        uses: msys2/setup-msys2@v2
        if: ${{ matrix.task == 'compile-qt5-32bit' }}
        with:
          msystem: mingw32
          release: true
          update: false
          path-type: inherit
          install: >-
            wget
            unzip
            mingw-w64-i686-gcc
            mingw-w64-i686-gcc-libs
            mingw-w64-i686-cmake
            mingw-w64-i686-libmad
            mingw-w64-i686-libsndfile
            mingw-w64-i686-flac
            mingw-w64-i686-fftw
            mingw-w64-i686-python-lxml
            mingw-w64-i686-qt5-base
            mingw-w64-i686-qt5-multimedia
            mingw-w64-i686-qt5-serialport
            mingw-w64-i686-qt5-websockets
            mingw-w64-i686-qt5-script
            mingw-w64-i686-qt5-tools
            mingw-w64-i686-qt5-imageformats
            mingw-w64-i686-qt5-svg
            mingw-w64-i686-qt5-declarative
            mingw-w64-i686-nsis

      - name: Install legacy libusb (32 bit)
        shell: msys2 {0}
        if: ${{ matrix.task == 'compile-qt5-32bit' }}
        run: |
          wget https://www.qlcplus.org/misc/mingw-w64-i686-libusb-1.0.26-1-any.pkg.tar.zst
          pacman --noconfirm --needed -U mingw-w64-i686-libusb-1.0.26-1-any.pkg.tar.zst

      - name: D2XX SDK (64 bit)
        shell: msys2 {0}
        if: ${{ matrix.task == 'compile-qt5' || matrix.task == 'compile-qt5qml' }}
        run: |
          mkdir -p /c/projects/D2XXSDK
          wget https://ftdichip.com/wp-content/uploads/2023/09/CDM-v2.12.36.4-WHQL-Certified.zip -O /c/projects/D2XXSDK/cdm.zip
          cd /c/projects/D2XXSDK
          unzip cdm.zip
          cd amd64
          gendef.exe - ftd2xx64.dll > ftd2xx.def
          dlltool -k --input-def ftd2xx.def --dllname ftd2xx64.dll --output-lib libftd2xx.a

      - name: D2XX SDK (32 bit)
        shell: msys2 {0}
        if: ${{ matrix.task == 'compile-qt5-32bit' }}
        run: |
          mkdir -p /c/projects/D2XXSDK
          wget https://ftdichip.com/wp-content/uploads/2023/09/CDM-v2.12.36.4-WHQL-Certified.zip -O /c/projects/D2XXSDK/cdm.zip
          cd /c/projects/D2XXSDK
          unzip cdm.zip
          cd i386
          gendef.exe - ftd2xx.dll > ftd2xx.def
          dlltool -k --input-def ftd2xx.def --dllname ftd2xx.dll --output-lib libftd2xx.a

      - name: Print program versions
        shell: msys2 {0}
        run: |
          echo "pwd:"
          pwd
          echo "CXX:"
          which ${CXX} || true
          ${CXX} -v || true
          echo "cmake:"
          which cmake || true
          cmake --version || true
          pkg-config --modversion libusb-1.0

      - name: Fix build
        shell: msys2 {0}
        run: |
          # force a release build
          sed -i -e 's/Debug/Release/g' CMakeLists.txt
          # disable Velleman plugin
          sed -i -e 's/    add_subdirectory(velleman)/#    add_subdirectory(velleman)/g' plugins/CMakeLists.txt
          # fix MSYS2 system path
          sed -i -e 's/$ENV{SystemDrive}\/msys64/D:\/a\/_temp\/msys64/g' platforms/windows/CMakeLists.txt
          # fix project path in NSIS script
          sed -i -e 's/c\:\\projects/d:\\a\\qlcplus/g' platforms/windows/${{env.NSIS_SCRIPT}}

      - name: Fix 32 bit build
        if: ${{ matrix.task == 'compile-qt5-32bit' }}
        shell: msys2 {0}
        run: |
          # fix system libs path
          sed -i -e 's/mingw64/mingw32/g' platforms/windows/CMakeLists.txt
          # fix gcc lib
          sed -i -e 's/libgcc_s_seh/libgcc_s_dw2/g' platforms/windows/CMakeLists.txt
          # fix DMX USB path
          sed -i -e 's/amd64/i386/g' plugins/dmxusb/src/CMakeLists.txt
          sed -i -e 's/ftd2xx64.dll/ftd2xx.dll/g' plugins/dmxusb/src/CMakeLists.txt

      - name: Configure v4 build for Windows
        shell: msys2 {0}
        if: ${{ matrix.task == 'compile-qt5' || matrix.task == 'compile-qt5-32bit' }}
        run: |
          cmake -S . -B build -G "Unix Makefiles"

      - name: Configure v5 build for Windows
        shell: msys2 {0}
        if: ${{ matrix.task == 'compile-qt5qml' }}
        run: |
          cmake -S . -B build -G "Unix Makefiles" -Dqmlui=ON

      - name: Build for Windows
        shell: msys2 {0}
        run: |
          cd build
          make -j${NPROC}

      - name: Install on Windows
        shell: msys2 {0}
        run: |
          cd build
          make install/fast
          cd ..
          cp *.qm /c/qlcplus

      - name: Build installation package
        shell: msys2 {0}
        run: |
          cd /c/qlcplus
          echo 'Creating package...'
          makensis -X'SetCompressor /FINAL lzma' ${{env.NSIS_SCRIPT}}
          mv /c/qlcplus/${{env.OUTFILE}} /d/a/qlcplus/qlcplus/${{matrix.task}}-${{env.OUTFILE}}

      - name: Store executable artifact
        uses: actions/upload-artifact@v4
        with:
          name: QLC+-${{matrix.task}}-${{env.APPVERSION}}-${{env.BUILD_DATE}}-${{env.GIT_REV}}.exe
          path: ${{matrix.task}}-${{env.OUTFILE}}
